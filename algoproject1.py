def preferred_starting_city(distances, fuel, mpg):
    # Initialize the required variables
    total_surplus = 0                      # Tracks total surplus or deficit for the entire route
    current_surplus = 0                    # Tracks surplus for the current journey segment
    starting_city = 0                      # Tracks the index of the potential starting city

    # Iterate over each city
    for i in range(len(distances)):
        # Calculate the surplus or deficit at city i
        fuel_at_city = fuel[i] * mpg       # Fuel generated by the gas station at city i
        distance_to_next = distances[i]    # Distance from city i to the next city
        current_surplus += fuel_at_city - distance_to_next
        total_surplus += fuel_at_city - distance_to_next  # Update total surplus

        # If current surplus is negative, we reset the starting city
        if current_surplus < 0:
            # Reset to the next city as a potential starting city
            starting_city = i + 1
            # Reset current surplus since we cannot complete the journey from the previous starting city
            current_surplus = 0

    # Final check: if total surplus is non-negative, we can make a round trip starting at `starting_city`
    if total_surplus >= 0:
        return starting_city
    else:
        return -1  # If no valid starting city exists (not expected based on problem constraints)

# Example usage based on the problem's sample input
city_distances = [5, 25, 15, 10, 15]  # Distances between neighboring cities
fuel = [1, 2, 1, 0, 3]                # Fuel available at each city
mpg = 10                               # Miles per gallon

# Run the function and display the result
print("Preferred starting city:", preferred_starting_city(city_distances, fuel, mpg))  # Expected output: 4
